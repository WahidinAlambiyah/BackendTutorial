package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrxCouponAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCouponAllPropertiesEquals(TrxCoupon expected, TrxCoupon actual) {
        assertTrxCouponAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxCouponAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCouponAllUpdatablePropertiesEquals(TrxCoupon expected, TrxCoupon actual) {
        assertTrxCouponUpdatableFieldsEquals(expected, actual);
        assertTrxCouponUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCouponAutoGeneratedPropertiesEquals(TrxCoupon expected, TrxCoupon actual) {
        assertThat(expected)
            .as("Verify TrxCoupon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCouponUpdatableFieldsEquals(TrxCoupon expected, TrxCoupon actual) {
        assertThat(expected)
            .as("Verify TrxCoupon relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(
                e ->
                    assertThat(e.getDiscountAmount())
                        .as("check discountAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDiscountAmount())
            )
            .satisfies(e -> assertThat(e.getValidUntil()).as("check validUntil").isEqualTo(actual.getValidUntil()))
            .satisfies(
                e ->
                    assertThat(e.getMinPurchase())
                        .as("check minPurchase")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMinPurchase())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCouponUpdatableRelationshipsEquals(TrxCoupon expected, TrxCoupon actual) {}
}
