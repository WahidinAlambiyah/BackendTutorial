package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockAllPropertiesEquals(Stock expected, Stock actual) {
        assertStockAutoGeneratedPropertiesEquals(expected, actual);
        assertStockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockAllUpdatablePropertiesEquals(Stock expected, Stock actual) {
        assertStockUpdatableFieldsEquals(expected, actual);
        assertStockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockAutoGeneratedPropertiesEquals(Stock expected, Stock actual) {
        assertThat(expected)
            .as("Verify Stock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockUpdatableFieldsEquals(Stock expected, Stock actual) {
        assertThat(expected)
            .as("Verify Stock relevant properties")
            .satisfies(e -> assertThat(e.getQuantityAvailable()).as("check quantityAvailable").isEqualTo(actual.getQuantityAvailable()))
            .satisfies(e -> assertThat(e.getReorderLevel()).as("check reorderLevel").isEqualTo(actual.getReorderLevel()))
            .satisfies(e -> assertThat(e.getExpiryDate()).as("check expiryDate").isEqualTo(actual.getExpiryDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockUpdatableRelationshipsEquals(Stock expected, Stock actual) {
        assertThat(expected)
            .as("Verify Stock relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
