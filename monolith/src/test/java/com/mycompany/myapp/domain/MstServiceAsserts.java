package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MstServiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMstServiceAllPropertiesEquals(MstService expected, MstService actual) {
        assertMstServiceAutoGeneratedPropertiesEquals(expected, actual);
        assertMstServiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMstServiceAllUpdatablePropertiesEquals(MstService expected, MstService actual) {
        assertMstServiceUpdatableFieldsEquals(expected, actual);
        assertMstServiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMstServiceAutoGeneratedPropertiesEquals(MstService expected, MstService actual) {
        assertThat(expected)
            .as("Verify MstService auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMstServiceUpdatableFieldsEquals(MstService expected, MstService actual) {
        assertThat(expected)
            .as("Verify MstService relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDurationInHours()).as("check durationInHours").isEqualTo(actual.getDurationInHours()))
            .satisfies(e -> assertThat(e.getServiceType()).as("check serviceType").isEqualTo(actual.getServiceType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMstServiceUpdatableRelationshipsEquals(MstService expected, MstService actual) {
        assertThat(expected)
            .as("Verify MstService relationships")
            .satisfies(e -> assertThat(e.getTestimonial()).as("check testimonial").isEqualTo(actual.getTestimonial()));
    }
}
