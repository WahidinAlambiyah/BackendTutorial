package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrxOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderAllPropertiesEquals(TrxOrder expected, TrxOrder actual) {
        assertTrxOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderAllUpdatablePropertiesEquals(TrxOrder expected, TrxOrder actual) {
        assertTrxOrderUpdatableFieldsEquals(expected, actual);
        assertTrxOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderAutoGeneratedPropertiesEquals(TrxOrder expected, TrxOrder actual) {
        assertThat(expected)
            .as("Verify TrxOrder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderUpdatableFieldsEquals(TrxOrder expected, TrxOrder actual) {
        assertThat(expected)
            .as("Verify TrxOrder relevant properties")
            .satisfies(e -> assertThat(e.getOrderDate()).as("check orderDate").isEqualTo(actual.getOrderDate()))
            .satisfies(e -> assertThat(e.getDeliveryDate()).as("check deliveryDate").isEqualTo(actual.getDeliveryDate()))
            .satisfies(e -> assertThat(e.getOrderStatus()).as("check orderStatus").isEqualTo(actual.getOrderStatus()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()))
            .satisfies(
                e ->
                    assertThat(e.getTotalAmount())
                        .as("check totalAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderUpdatableRelationshipsEquals(TrxOrder expected, TrxOrder actual) {
        assertThat(expected)
            .as("Verify TrxOrder relationships")
            .satisfies(e -> assertThat(e.getMstCustomer()).as("check mstCustomer").isEqualTo(actual.getMstCustomer()));
    }
}
