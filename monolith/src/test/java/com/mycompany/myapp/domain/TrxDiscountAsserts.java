package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrxDiscountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxDiscountAllPropertiesEquals(TrxDiscount expected, TrxDiscount actual) {
        assertTrxDiscountAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxDiscountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxDiscountAllUpdatablePropertiesEquals(TrxDiscount expected, TrxDiscount actual) {
        assertTrxDiscountUpdatableFieldsEquals(expected, actual);
        assertTrxDiscountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxDiscountAutoGeneratedPropertiesEquals(TrxDiscount expected, TrxDiscount actual) {
        assertThat(expected)
            .as("Verify TrxDiscount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxDiscountUpdatableFieldsEquals(TrxDiscount expected, TrxDiscount actual) {
        assertThat(expected)
            .as("Verify TrxDiscount relevant properties")
            .satisfies(e -> assertThat(e.getDiscountPercentage()).as("check discountPercentage").isEqualTo(actual.getDiscountPercentage()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxDiscountUpdatableRelationshipsEquals(TrxDiscount expected, TrxDiscount actual) {}
}
