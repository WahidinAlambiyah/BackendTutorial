package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrxNotificationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxNotificationAllPropertiesEquals(TrxNotification expected, TrxNotification actual) {
        assertTrxNotificationAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxNotificationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxNotificationAllUpdatablePropertiesEquals(TrxNotification expected, TrxNotification actual) {
        assertTrxNotificationUpdatableFieldsEquals(expected, actual);
        assertTrxNotificationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxNotificationAutoGeneratedPropertiesEquals(TrxNotification expected, TrxNotification actual) {
        assertThat(expected)
            .as("Verify TrxNotification auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxNotificationUpdatableFieldsEquals(TrxNotification expected, TrxNotification actual) {
        assertThat(expected)
            .as("Verify TrxNotification relevant properties")
            .satisfies(e -> assertThat(e.getRecipient()).as("check recipient").isEqualTo(actual.getRecipient()))
            .satisfies(e -> assertThat(e.getMessageType()).as("check messageType").isEqualTo(actual.getMessageType()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getSentAt()).as("check sentAt").isEqualTo(actual.getSentAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxNotificationUpdatableRelationshipsEquals(TrxNotification expected, TrxNotification actual) {
        assertThat(expected)
            .as("Verify TrxNotification relationships")
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
