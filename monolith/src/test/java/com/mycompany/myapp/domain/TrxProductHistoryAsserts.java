package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrxProductHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxProductHistoryAllPropertiesEquals(TrxProductHistory expected, TrxProductHistory actual) {
        assertTrxProductHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxProductHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxProductHistoryAllUpdatablePropertiesEquals(TrxProductHistory expected, TrxProductHistory actual) {
        assertTrxProductHistoryUpdatableFieldsEquals(expected, actual);
        assertTrxProductHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxProductHistoryAutoGeneratedPropertiesEquals(TrxProductHistory expected, TrxProductHistory actual) {
        assertThat(expected)
            .as("Verify TrxProductHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxProductHistoryUpdatableFieldsEquals(TrxProductHistory expected, TrxProductHistory actual) {
        assertThat(expected)
            .as("Verify TrxProductHistory relevant properties")
            .satisfies(
                e -> assertThat(e.getOldPrice()).as("check oldPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getOldPrice())
            )
            .satisfies(
                e -> assertThat(e.getNewPrice()).as("check newPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getNewPrice())
            )
            .satisfies(e -> assertThat(e.getChangeDate()).as("check changeDate").isEqualTo(actual.getChangeDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxProductHistoryUpdatableRelationshipsEquals(TrxProductHistory expected, TrxProductHistory actual) {}
}
