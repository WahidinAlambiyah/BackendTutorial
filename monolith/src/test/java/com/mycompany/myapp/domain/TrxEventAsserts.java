package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrxEventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxEventAllPropertiesEquals(TrxEvent expected, TrxEvent actual) {
        assertTrxEventAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxEventAllUpdatablePropertiesEquals(TrxEvent expected, TrxEvent actual) {
        assertTrxEventUpdatableFieldsEquals(expected, actual);
        assertTrxEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxEventAutoGeneratedPropertiesEquals(TrxEvent expected, TrxEvent actual) {
        assertThat(expected)
            .as("Verify TrxEvent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxEventUpdatableFieldsEquals(TrxEvent expected, TrxEvent actual) {
        assertThat(expected)
            .as("Verify TrxEvent relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getCapacity()).as("check capacity").isEqualTo(actual.getCapacity()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxEventUpdatableRelationshipsEquals(TrxEvent expected, TrxEvent actual) {
        assertThat(expected)
            .as("Verify TrxEvent relationships")
            .satisfies(e -> assertThat(e.getService()).as("check service").isEqualTo(actual.getService()))
            .satisfies(e -> assertThat(e.getTestimonial()).as("check testimonial").isEqualTo(actual.getTestimonial()));
    }
}
