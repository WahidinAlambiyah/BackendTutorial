package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrxOrderStockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderStockAllPropertiesEquals(TrxOrderStock expected, TrxOrderStock actual) {
        assertTrxOrderStockAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxOrderStockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderStockAllUpdatablePropertiesEquals(TrxOrderStock expected, TrxOrderStock actual) {
        assertTrxOrderStockUpdatableFieldsEquals(expected, actual);
        assertTrxOrderStockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderStockAutoGeneratedPropertiesEquals(TrxOrderStock expected, TrxOrderStock actual) {
        assertThat(expected)
            .as("Verify TrxOrderStock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderStockUpdatableFieldsEquals(TrxOrderStock expected, TrxOrderStock actual) {
        assertThat(expected)
            .as("Verify TrxOrderStock relevant properties")
            .satisfies(e -> assertThat(e.getQuantityOrdered()).as("check quantityOrdered").isEqualTo(actual.getQuantityOrdered()))
            .satisfies(e -> assertThat(e.getOrderDate()).as("check orderDate").isEqualTo(actual.getOrderDate()))
            .satisfies(
                e -> assertThat(e.getExpectedArrivalDate()).as("check expectedArrivalDate").isEqualTo(actual.getExpectedArrivalDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderStockUpdatableRelationshipsEquals(TrxOrderStock expected, TrxOrderStock actual) {
        assertThat(expected)
            .as("Verify TrxOrderStock relationships")
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()));
    }
}
