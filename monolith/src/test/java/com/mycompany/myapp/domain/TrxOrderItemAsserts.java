package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrxOrderItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderItemAllPropertiesEquals(TrxOrderItem expected, TrxOrderItem actual) {
        assertTrxOrderItemAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxOrderItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderItemAllUpdatablePropertiesEquals(TrxOrderItem expected, TrxOrderItem actual) {
        assertTrxOrderItemUpdatableFieldsEquals(expected, actual);
        assertTrxOrderItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderItemAutoGeneratedPropertiesEquals(TrxOrderItem expected, TrxOrderItem actual) {
        assertThat(expected)
            .as("Verify TrxOrderItem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderItemUpdatableFieldsEquals(TrxOrderItem expected, TrxOrderItem actual) {
        assertThat(expected)
            .as("Verify TrxOrderItem relevant properties")
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxOrderItemUpdatableRelationshipsEquals(TrxOrderItem expected, TrxOrderItem actual) {
        assertThat(expected)
            .as("Verify TrxOrderItem relationships")
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
