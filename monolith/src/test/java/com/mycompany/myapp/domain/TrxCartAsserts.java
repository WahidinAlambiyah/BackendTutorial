package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrxCartAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCartAllPropertiesEquals(TrxCart expected, TrxCart actual) {
        assertTrxCartAutoGeneratedPropertiesEquals(expected, actual);
        assertTrxCartAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCartAllUpdatablePropertiesEquals(TrxCart expected, TrxCart actual) {
        assertTrxCartUpdatableFieldsEquals(expected, actual);
        assertTrxCartUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCartAutoGeneratedPropertiesEquals(TrxCart expected, TrxCart actual) {
        assertThat(expected)
            .as("Verify TrxCart auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCartUpdatableFieldsEquals(TrxCart expected, TrxCart actual) {
        assertThat(expected)
            .as("Verify TrxCart relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getTotalPrice())
                        .as("check totalPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalPrice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrxCartUpdatableRelationshipsEquals(TrxCart expected, TrxCart actual) {
        assertThat(expected)
            .as("Verify TrxCart relationships")
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
