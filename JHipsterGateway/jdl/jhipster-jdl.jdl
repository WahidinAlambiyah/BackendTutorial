// ============FOREVENT============ //

entity Event {
    title String required,
    description TextBlob,
    date Instant required,
    location String,
    capacity Integer,
    price BigDecimal,
    status EventStatus
}

enum EventStatus {
    UPCOMING,
    ONGOING,
    COMPLETED,
    CANCELLED
}


entity Tournament {
    name String required,
    type TournamentType,
    prizeAmount BigDecimal,
    startDate Instant required,
    endDate Instant required,
    location String,
    maxParticipants Integer,
    status TournamentStatus
}

enum TournamentType {
    TEAM,
    SOLO
}

enum TournamentStatus {
    UPCOMING,
    IN_PROGRESS,
    FINISHED,
    CANCELLED
}

relationship OneToMany {
    Event{tournament} to Tournament{event(title)}
}

entity Services {
    name String required,
    description TextBlob,
    price BigDecimal,
    durationInHours Integer,
    serviceTsype ServicesType
}

enum ServiceType {
    EVENT_MANAGEMENT,
    TICKETING,
    SPONSORSHIP,
    MARKETING
}

relationship ManyToOne {
    Event{services} to Services{event}
}
entity Testimonial {
    name String required,
    feedback TextBlob required,
    rating Integer required min(1) max(5),
    date Instant required
}

relationship ManyToOne {
    Event{testimonial} to Testimonial{event},
    Services{testimonial} to Testimonial{services}
}



// Audit Entity will be Manually add from java Code

// entity AbstractAuditingEntity {
//    createdDate Instant required
//    lastModifiedDate Instant
//}

// Mark the entity as abstract so that it won't be treated as a regular entity.
// abstract AbstractAuditingEntity

entity Region {
	name String required
	unm49Code String unique
	isoAlpha2Code String unique
}

entity Country {
	name String required
	unm49Code String unique
	isoAlpha2Code String unique
}

entity Province {
	name String required
	unm49Code String unique
	isoAlpha2Code String unique
}

entity City {
	name String required
	unm49Code String unique
	isoAlpha2Code String unique
}

entity District {
	name String required
	unm49Code String unique
	isoAlpha2Code String unique
}

entity SubDistrict {
	name String required
	unm49Code String unique
	isoAlpha2Code String unique
}

entity PostalCode {
	code String required unique
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String
	postalCode String
	city String
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String
	lastName String
	email String
	phoneNumber String
	hireDate Instant
	salary Long
	commissionPct Long
}

entity Job {
	jobTitle String
	minSalary Long
	maxSalary Long
}

entity JobHistory {
	startDate Instant
	endDate Instant
	language Language
}

enum Language {
    FRENCH, ENGLISH, SPANISH
}

// relationship OneToOne {
//	Country{region} to Region
// }

relationship OneToMany {
    Region{country} to Country{region(name)},
    Country{province} to Province{country(name)},
    Province{city} to City{province(name)},
    City{district} to District{city(name)},
    District{subDistrict} to SubDistrict{district(name)},
    SubDistrict{postalCode} to PostalCode{SubDistrict(name)}
}

// relationship OneToOne {
//	Location{country} to Country
// }

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee to Job{employee}
	/**
	* A relationship
	*/
	Department to
	/**
	* Another side of the same relationship
	*/
	Employee{department}
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job
	JobHistory{department} to Department
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job, Region, Country, Province, City, District, SubDistrict, PostalCode with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct
dto * with mapstruct

// Set service options to all except few
// service all with serviceImpl except Employee, Job
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix

filter * 


