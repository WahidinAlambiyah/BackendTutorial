package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TournamentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllPropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentAutoGeneratedPropertiesEquals(expected, actual);
        assertTournamentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllUpdatablePropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentUpdatableFieldsEquals(expected, actual);
        assertTournamentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAutoGeneratedPropertiesEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableFieldsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(
                e ->
                    assertThat(e.getPrizeAmount())
                        .as("check prizeAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrizeAmount())
            )
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getMaxParticipants()).as("check maxParticipants").isEqualTo(actual.getMaxParticipants()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableRelationshipsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relationships")
            .satisfies(e -> assertThat(e.getEvent()).as("check event").isEqualTo(actual.getEvent()));
    }
}
